html, body {
    width: 100%;
    height: 100%;
}
body{
    /*display:flex하면 Flex 아이템들은 가로 방향으로 배치되고, 자신이 가진 내용물의 width 만큼만 차지하게 됩니다. 
    마치 inline 요소들 처럼요. height는 컨테이너의 높이만큼 늘어납니다. */
    display: flex;
    /*  justify-content 속성은 플렉스 요소의 수평 방향 정렬 방식을 설정합니다.
        center : 플렉스 요소는 플렉스 컨테이너의 가운데에서부터 배치됩니다.*/
    justify-content: center;
    align-items: center;
    background: #fafafa;
}
h1{
    margin-bottom: 40px;
    font-size: 3.5em;
}
.wapper{
    display: flex;
    /*  flex-direction 속성은 플렉스 컨테이너 안에서 플렉스 요소가 배치될 방향을 설정
        column : 만약에 쓰기 방식이 수평이면, 플렉스 요소는 수직 방향으로 위쪽에서 아래쪽으로 배치됩니다.*/
    flex-direction: column;
    /*  padding에서 2개를 주면 첫번째는 상하, 두번째는 좌우를 말한다.
        em : 요소의 글골 크기를 1em으로 갖는다. 만약 해당 요소의 글꼴 크기가 없다면 부모의 폰트 사이즈를 1em으로 해당한다.
        이는 폰트 사이즈는 부모 요소로부터 상속받기 때문이다.*/
    padding: 3em 2em;
    background: #fff;
    border: 1px solid #e8e8e8;
    text-align: center;
}

#login{
    display: flex;
    flex-direction: column;
}

#login input{
    height: 45px;
    width: 350px;
    padding: 0 20px;
    margin-bottom: 10px;
    color: #000;
    background: #fafafa;
    /*  border-radius 속성은 요소 테두리 경계의 꼭짓점을 둥글게 만듭니다. 
        하나의 값을 사용해 원형 꼭짓점을, 두 개의 값을 사용해 타원형 꼭짓점을 적용할 수 있습니다.*/
    border-radius: 5px;
    border: 1px solid #f1f1f1;
    font-size: 1em;
}

#login input:focus {
    border: 1 px solid #d6d6d6;
}

#login button {
    height: 40px;
    margin: 23px 0;
    color: #fff;
    background: #c4e1fb;
    border-radius: 5px;
    font-size: 1.2em;
    line-height: 1;
    text-align: center;
    transition: all 0.3s;
    cursor: default;
}

#login button:active{
    background: #52adff;
}

#lost_pw{
    margin-top: 70px;
    color: #3c5588;
}